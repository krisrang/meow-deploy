# /etc/init/god.conf
# Upstart script for managing god running through the deploy user's rbenv setup
# Only tested on Ubuntu 12.04, 12.10

description   "God Process Monitoring"
author        "Christoph Geschwind <christoph@mixxt.net>"

start on runlevel [2345]
stop on runlevel [!2345]

respawn              # respawn the service if it dies
respawn limit 5 10   # stop respawning if it fails 5 times in 10 seconds

pre-start script
  mkdir -p /var/run/god  # create gods pid directory, you might not need this
end script

script
  # . /home/deploy/.profile             # load environment variables
  echo $$ > /var/run/god/god.pid
  export RBENV_ROOT="/home/deploy/.rbenv"    # set required rbenv variable
  # launch god via rbenv NOT daemonized, loads a centralized config in /etc/god.conf
  exec /home/deploy/.rbenv/bin/rbenv exec god -D -c /etc/god.conf 

  # could not get this working without the -D flag and any expect behaviour,
  # see http://upstart.ubuntu.com/cookbook/#expect for more information
  # this paragraph supported my decision: 
  #   "If your daemon has a "don't daemonize" or "run in the foreground" mode, then it's much simpler to use that and not run
  #   with fork following. One issue with that though, is that Upstart will emit the started JOB=yourjob event as soon as it has 
  #   executed your daemon, which may be before it has had time to listen for incoming connections or fully initialize."

end script


# /etc/god.conf
# Basic god.conf to load currently configured sites on reboot and the custom condition

God.load "/etc/god.d/*.rb"
God.load "/home/deploy/sites/god/*.conf"

# /etc/god.d/file_touched.rb
# Custom condition necessary until God > 0.13.1 is released
module God
  module Conditions
  
    # Condition Symbol :file_touched
    # Type: Poll
    #
    # Trigger when a specified file is touched.
    #
    # Paramaters
    #   Required
    #     +path+ is the path to the file to watch.
    #
    # Examples
    #
    # Trigger if 'tmp/restart.txt' file is touched (from a Watch):
    #
    #   on.condition(:file_touched) do |c|
    #     c.path = 'tmp/restart.txt'
    #   end
    #
    class FileTouched < PollCondition
      attr_accessor :path

      def initialize
        super
        self.path = nil
      end

      def valid?
        valid = true
        valid &= complain("Attribute 'path' must be specified", self) if self.path.nil?
        valid
      end

      def test
        if File.exists?(self.path)
          (Time.now - File.mtime(self.path)) <= self.interval
        else
          false
        end
      end
    end
  end
end


# app/config/god.conf
# App specific file for god, goes under your app root. 
# Gets symlinked to god_conf_path

site_root = '/home/deploy/sites/app'

God.watch do |w|
  w.name = "app"
  w.dir = "#{site_root}/current"
  w.interval = 30.seconds
  w.log = "#{site_root}/shared/log/god.log"
  w.env = 
    { 'HOME' => "/home/deploy",
      'RAILS_ENV' => 'production' }

  w.uid = 'deploy'
  w.gid = 'deploy'

  w.keepalive
 
  w.start = "bundle exec foreman start -c"

  w.transition(:up, :restart) do |on|
    on.condition(:memory_usage) do |c|
      c.above = 300.megabytes
      c.times = 2
      c.notify = 'kris'
    end

    on.condition(:file_touched) do |c|
      c.interval = 5.seconds
      c.path = "#{site_root}/shared/restart.txt"
    end
  end

  w.transition(:up, :start) do |on|
    on.condition(:process_exits) do |c|
      c.notify = 'kris'
    end
  end
end
